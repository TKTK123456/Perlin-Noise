<title>Perlin noise</title>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src='perlin.js'></script>
<style>
.centerbox {
  /* flexbox, por favor */
  display: -webkit-box;
  -webkit-box-orient: horizontal;
  -webkit-box-pack: center;
  -webkit-box-align: center;

  display: -moz-box;
  -moz-box-orient: horizontal;
  -moz-box-pack: center;
  -moz-box-align: center;

  width: 100%;
  height: 100%;
  margin: 0; padding: 0;
}
body, html { width: 100%; height: 100%; padding: 0; margin: 0; }
canvas {
  /* border-radius: 30px;  Border radiuses don't seem to work with putImageData */
  box-shadow: 0 0 10px #777;
  width: <%= canvasWidth %>px;
  height: <%= canvasHeight %>px;
}
body {
  background-color: #eee;
}
</style>
<div class='centerbox'><canvas></canvas></div>
<button onclick="render(canvas.width, canvas.height)">Render 2D</button>
<div class='centerbox'><canvas></canvas></div>
<script>
var canvas = document.getElementsByTagName('canvas')[0];
canvas.width = parseInt('<%= canvasWidth %>');
canvas.height = parseInt('<%= canvasHeight %>');
var can2 = document.getElementsByTagName('canvas')[1];
var ctx2 = can2.getContext('2d');

var image2 = ctx2.createImageData(canvas.width, canvas.height);
var data2 = image2.data;
var ctx = canvas.getContext('2d');

var image = ctx.createImageData(canvas.width, canvas.height);
var data = image.data;
async function render(w,h) {
  const GRID_SIZE = 4;
  const RESOLUTION = 128;
  const COLOR_SCALE = 250;

  let pixel_size = ((w+h)/2) / RESOLUTION;
  let num_pixels = GRID_SIZE / RESOLUTION;

  for (let y = 0; y < GRID_SIZE; y += num_pixels / GRID_SIZE){
      for (let x = 0; x < GRID_SIZE; x += num_pixels / GRID_SIZE){
          let v = parseInt(perlin.get(x, y) * COLOR_SCALE);
          ctx.fillStyle = 'hsl('+v+',50%,50%)';
          ctx.fillRect(
              x / GRID_SIZE * w,
              y / GRID_SIZE * h,
              pixel_size,
              pixel_size
          );
      }
  }
  await render2(w, h)
  perlin.seed()
}
async function render2(w, h) {
  const GRID_SIZE = 4;
  const RESOLUTION = 128;
  const COLOR_SCALE = 250;

  let pixel_size = ((w+h)/2) / RESOLUTION;
  let num_pixels = GRID_SIZE / RESOLUTION;

  for (let y = 0; y < GRID_SIZE; y += num_pixels / GRID_SIZE){
      for (let x = 0; x < GRID_SIZE; x += num_pixels / GRID_SIZE){
          let v = parseInt(perlin.get(x, y) * COLOR_SCALE);
        ctx2.fillStyle = 'hsl('+v+',50%,50%)';
          ctx2.fillRect(
              x / GRID_SIZE * w,
              y / GRID_SIZE * h,
              pixel_size,
              pixel_size
          );
      }
  }
  
}
</script>
